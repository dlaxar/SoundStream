package {    import flash.display.Sprite;    import flash.display.Graphics;    import flash.events.Event;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundMixer;    import flash.net.URLRequest;    import flash.utils.ByteArray;    import flash.text.TextField;    public class BalanceView extends Sprite {				private var audio:AudioPlayer;		private var preferredWidth:int;		private var preferredHeight:int;        public function BalanceView(audio:AudioPlayer, preferredWidth:int, preferredHeight:int) {            this.audio = audio;			this.preferredWidth = preferredWidth;			this.preferredHeight = preferredHeight;                        this.addEventListener(Event.ENTER_FRAME, onEnterFrame);						this.graphics.beginFill(0x000000, 0);			this.graphics.drawRect(0, 0, this.preferredWidth, this.preferredHeight);			this.graphics.endFill();        }        private function onEnterFrame(event:Event):void {            var bytes:ByteArray = audio.getBalance();            const PLOT_HEIGHT:int = 200;            const CHANNEL_LENGTH:int = 256;                        var g:Graphics = this.graphics;						var w:int = 512;			var x = this.preferredWidth/2 - w/2;			var y = this.preferredHeight/2 - PLOT_HEIGHT;                        g.clear();						this.graphics.beginFill(0x000000, 0);			this.graphics.drawRect(0, 0, this.preferredWidth, this.preferredHeight);			this.graphics.endFill();                   g.lineStyle(0, /*0x6600CC*/0xFF9238);            g.beginFill(/*0x6600CC*/0xFF9238, 0.5);            g.moveTo(x, PLOT_HEIGHT + y);                        var n:Number = 0;                        for (var i:int = 0; i < CHANNEL_LENGTH; i++) {                n = (bytes.readFloat() * PLOT_HEIGHT);                g.lineTo(i * 2 + x, PLOT_HEIGHT - n + y);            }            g.lineTo(CHANNEL_LENGTH * 2 + x, PLOT_HEIGHT + y);            g.endFill();             g.lineStyle(0, /*0xCC0066*/0xFF0000);            g.beginFill(/*0xCC0066*/0xFF0000, 0.5);            g.moveTo(CHANNEL_LENGTH * 2 + x, PLOT_HEIGHT + y);                        for (i = CHANNEL_LENGTH; i > 0; i--) {                n = (bytes.readFloat() * PLOT_HEIGHT);                g.lineTo(i * 2 + x, PLOT_HEIGHT - n + y);            }              g.lineTo(x, PLOT_HEIGHT + y);            g.endFill();        }    }}