package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.ByteArray;	import flash.events.MouseEvent;		public class SpectogramView extends MovieClip {				private var max:Array;		private var steps:int = 16;		private static const CHANNEL_LENGTH = 256;		private var renderSteps:int = 5;		private var colors:Array;		private var audio:AudioPlayer;		private var preferredWidth:int;		private var preferredHeight:int;				public function SpectogramView(audioPlayer:AudioPlayer, preferredWidth:int, preferredHeight:int) {			this.audio = audioPlayer;			this.preferredWidth = preferredWidth;			this.preferredHeight = preferredHeight;						this.audio.addEventListener(AudioPlayerEvents.PLAY, draw);						this.max = new Array();			for(var i:int = 0; i < SpectogramView.CHANNEL_LENGTH/steps; i++) {				this.max[i] = 0;			}						this.colors = [0xFF0000, 0xFF7400, 0xFF9238];						this.graphics.beginFill(0x000000, 0);			this.graphics.drawRect(0, 0, this.preferredWidth, this.preferredHeight);			this.graphics.endFill();						var logo:Logo = new Logo();						logo.x = this.preferredWidth/2 - logo.width/2;			logo.y = this.preferredHeight/2 - logo.height/2 + 75;						var self = this;			this.addEventListener(Event.ADDED_TO_STAGE, function() {				self.removeEventListener(Event.ADDED_TO_STAGE, arguments.callee);				stage.addChild(logo);				stage.addEventListener(MouseEvent.CLICK, function() {					stage.removeEventListener(MouseEvent.CLICK, arguments.callee);					stage.removeChild(logo);				});			});		}				private function draw(e:Event):void {			this.addEventListener(Event.ENTER_FRAME, this.onFrame);		}				private var count:int = 0;				private function onFrame(e:Event):void {			count ++;			if(count % this.renderSteps == 0) {				this.count = 0;				return;			}						this.graphics.clear();						var w = 500;			var h = 200;			var x = this.preferredWidth/2 - w/2;			var y = this.preferredHeight/2 - h/2;			//trace(y);						this.graphics.beginFill(0x000000, 0);			this.graphics.drawRect(0, 0, this.preferredWidth, this.preferredHeight);			graphics.endFill();						//this.removeEventListener(Event.ENTER_FRAME, arguments.callee);			var a:ByteArray = this.audio.getSpectrum();			var count:int = (SpectogramView.CHANNEL_LENGTH/this.steps);			var p:Number = (w/10) / count;			var chWidth:Number = (w*0.9)/count;			var v:Number;			for(var i = 0; i < 256; i++) {				v = a.readFloat()*h;				if(i % this.steps == 0) {					for(var n = h-v; n < h; n+= 4) {						this.graphics.beginFill(this.colors[Math.floor(n/(h/3))]);						this.graphics.drawRect((chWidth + p) * (i/this.steps) + x, n + y, chWidth, 2);						this.graphics.endFill();					}										if(v < this.max[i/this.steps]) {						this.graphics.beginFill(this.colors[Math.floor((h-this.max[i/this.steps])/(h/3))]);						this.graphics.drawRect((chWidth + p) * (i/this.steps) + x, h-this.max[i/this.steps] + y, chWidth, 2);						this.graphics.endFill();					}					else {						this.max[i/this.steps] = v;					}				}								this.max[i/this.steps]--;			}			/**/		}	}	}