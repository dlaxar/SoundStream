package  {	import flash.net.URLLoader;	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.events.EventDispatcher;	import flash.utils.ByteArray;	import flash.media.SoundMixer;	import flash.media.ID3Info;	import fl.motion.easing.Elastic;		public class AudioPlayer extends EventDispatcher {				private var list:Playlist = null;		private var currentItem:int = -1;		private var currentSound:Sound = null;		private var currentChannel:SoundChannel;		private var transformProperties:Object;		private var time:Number;				private var applicationInstance:SoundStream;		private var playing:Boolean = false;				public function AudioPlayer(applicationInstance:SoundStream) {			this.applicationInstance = applicationInstance;			this.transformProperties = {volume: 1, pan: 0};		}				public function next():Boolean {			if(currentItem < 0) return this.setItemNumber(0);			var b = setItemNumber(this.currentItem+1);			this.dispatchEvent(new Event(AudioPlayerEvents.NEXT));			return b;		}				public function playNext() {			if(this.isPlaying()) this.pause();			trace(this.next());			this.play();		}				public function playPrevious() {			if(this.isPlaying()) this.pause();			if(this.getTimePlayed() < 3000 && this.currentItem > 0) {				this.previous();			}			else {				this.time = 0;			}			this.play();		}				public function previous():Boolean {			var b = this.setItemNumber(this.currentItem-1);			this.dispatchEvent(new Event(AudioPlayerEvents.PREV));			return b;		}				public function setItemNumber(i:uint):Boolean {			if(i > list.getLength()-1 || i < 0) return false;			this.currentItem = i;			this.time = 0;			return true;		}				public function getItemNumber():uint {			return this.currentItem;		}				public function setPlaylist(list:Playlist) {			this.pause();			this.list = list;			this.currentItem = -1;			this.dispatchEvent(new Event(AudioPlayerEvents.PLAYLIST_LOADED));		}				public function play():void {			if(this.currentItem < 0) this.next();						this.playing = true;			this.currentSound = this.list.getTrack(this.currentItem) as Sound;						trace(this.currentSound)						this.currentChannel = this.currentSound.play(this.time);												this.currentChannel.soundTransform = new SoundTransform();			this.currentChannel.addEventListener(Event.SOUND_COMPLETE, this.soundCompleted);			this.dispatchEvent(new Event(AudioPlayerEvents.PLAY));												var self = this;			if(!this.list.isID3Ready(this.currentItem)) {				this.currentSound.addEventListener(Event.ID3, function() {					self.dispatchEvent(new Event(AudioPlayerEvents.NEW_SONG_ID3));				});			}			else {				//trace("Artist" + this.currentSound.id3.artist);				//this.list.computeImage(this.currentItem);			}		}				private function soundCompleted(e:Event) {			this.currentChannel.removeEventListener(Event.SOUND_COMPLETE, this.soundCompleted);						if(this.next()) {				this.play();			} else {				this.dispatchEvent(new Event(AudioPlayerEvents.PLAYLIST_COMPLETED));				this.playing = false;				this.currentItem = -1;				this.time = 0;			}		}				public function pause() {			this.time = this.getTimePlayed();						if(!this.playing) return;			this.playing = false;						this.currentChannel.stop();					}				public function stop() {			this.pause();			this.time = 0;		}				public function updateTransformation() {			var s:SoundTransform = new SoundTransform();			s.pan = this.transformProperties.pan;			s.volume = this.transformProperties.volume;			if(this.currentChannel != null) this.currentChannel.soundTransform = s;		}				public function setPan(pan:Number):void {			this.transformProperties.pan = pan;			this.updateTransformation();		}				public function getPan():Number {			if(this.currentChannel == null) return 0;			return this.currentChannel.soundTransform.pan;		}				public function setVolume(vol:Number):void {			if(vol > 0)			this.transformProperties.volume = vol;			this.updateTransformation();		}				public function getVolume():Number {			if(this.currentChannel == null) return 1;			trace(this.currentChannel.soundTransform.volume);			return this.currentChannel.soundTransform.volume;		}				public function getSpectrum() {			var a:ByteArray = new ByteArray();			SoundMixer.computeSpectrum(a, true);			return a;		}				public function getBalance() {			var a:ByteArray = new ByteArray();			SoundMixer.computeSpectrum(a, false);			return a;		}				public function isPlaying():Boolean {			return this.playing;		}				public function getTimePlayed():Number {			if(this.isPlaying()) {				return this.currentChannel.position;			}			return this.time;		}				//returns a value between 0 (not loaded) and 1 (loaded completely)		public function getLoaded():Number {			if(this.currentSound == null) return 0;			return (this.currentSound.bytesLoaded/this.currentSound.bytesTotal)*100;		}				//returns a value between 0 (not played) and 100 (played completely)		public function getPlayed():Number {			if(this.currentSound == null) return 0;			return (this.getTimePlayed()) / this.currentSound.length/(this.getLoaded()/100);		}				public function setPlayed(percent:Number) {			if(this.currentSound == null) return;			this.pause();			this.time = percent/100 * this.currentSound.length/(this.getLoaded()/100);			this.play();		}				public function getSongTags():ID3Info {			if(this.currentSound == null || !this.list.isID3Ready(this.currentItem)) return null;			return this.currentSound.id3;		}				public function getList():Playlist {			return this.list;		}	}}