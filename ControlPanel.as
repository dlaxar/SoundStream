package  {	import flash.display.MovieClip;	import flash.events.Event;		public class ControlPanel extends MovieClip {				private var controls:Array;		private var pan:PanControl = null;		private var sound:SoundControl = null;		private var active:Control = null;		public function ControlPanel(audio:AudioPlayer) {			this.graphics.beginFill(0xFFFFFF, 0);			this.graphics.drawRect(0, 0, 20, 20);			//this.graphics.drawRect(0, 0, 						this.controls = new Array();			var i:int;						//pan			i = this.controls.push(new PanControl(20, 20, 0x000000, audio)) -1;			this.controls[i].x = this.calcWidth();								  			//volume			i = this.controls.push(new SoundControl(20, 20, 0x000000, audio)) - 1;			this.controls[i].x = this.calcWidth();						//previous			i = this.controls.push(new PrevControl(20, 20, 0x000000, audio)) - 1			this.controls[i].x = this.calcWidth();						//play			i = this.controls.push(new PlayControl(20, 20, 0x000000, audio)) -1;			this.controls[i].x = this.calcWidth();						//next			i = this.controls.push(new NextControl(20, 20, 0x000000, audio)) -1;			this.controls[i].x = this.calcWidth();						//progress			i = this.controls.push(new ProgressControl(20, 20, 0x000000, audio)) -1;			this.controls[i].x = this.calcWidth();						//now playing			i = this.controls.push(new NowPlayingControlElement(400, 20, 0x000000, audio)) -1;			this.controls[i].x = this.calcWidth();									this.controls.forEach(function(item:Control, index:int, array:Array) {				item.addEventListener(ControlEvents.OPENED, this.panelActivated);			}, this);						this.controls.forEach(function(item:Control, index:int, array:Array) {				this.addChild(item);			}, this);						this.addEventListener(Event.ENTER_FRAME, this.onTop);		}				private function onTop(e:Event) {			stage.setChildIndex(this, stage.numChildren-1);		}				public function requestControl(c:Control) {			if(this.active != null) {				this.active.close();				this.active.addEventListener(ControlEvents.CLOSED, function(e:Event) {					e.target.removeEventListener(ControlEvents.CLOSED, arguments.callee);					c.triggered(null); 				});			}			else c.triggered(null);		}				public function setActive(c:Control) {			this.active = c;		}				private function calcWidth() {			var i:int = 0;			for(var n:int = 0; n < this.controls.length - 1; n++) {				i += this.controls[n].width;			}			return i;		}				private function panelActivated(e:Event):void {			this.controls.forEach(function(item:Control, index:int, array:Array) {				item.deactivate();			}, this);			(e.target as Control).addEventListener(ControlEvents.CLOSED, this.panelDeactivated);		}				private function panelDeactivated(e:Event):void {			this.controls.forEach(function(item:Control, index:int, array:Array) {				item.activate();			}, this);			(e.target as Control).removeEventListener(ControlEvents.CLOSED, this.panelDeactivated);		}	}	}