package  {	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.Event;	import flash.display.MovieClip;		public class SoundStream extends MovieClip {				private var config:Object = null;		private var currentPlaylist:Playlist = null;		private var audioPlayer:AudioPlayer = null;		private var controls:ControlPanel = null;		private var tabs:TabPanel = null;				public function SoundStream() {			trace("Initializing Application");						this.initializeConfiguration();			this.addEventListener(ConfigurationEvents.LOADED, function(e) {				e.target.loadPlaylist();							});						this.addEventListener(AudioPlayerEvents.CREATED, function(e) {								   e.target.initializeGraphics(null);								   });						trace("Initializing completet. Constructor will now exit");		}		//-- 	Configuration				// loads the configuration		private function initializeConfiguration() {			var url:URLRequest = new URLRequest("http://music.dev/config.keyval");			var req:URLLoader = new URLLoader(url);			req.addEventListener(Event.COMPLETE, this.onConfigurationLoaded);		}				// will dispatch the configuration loaded event		private function onConfigurationLoaded(e) {			var config = SoundStream.keyvalueDecode(e.target.data);			this.config = config;			this.dispatchEvent(new Event(ConfigurationEvents.LOADED));		}				//returns the configuration as an object. if it is only a key, the value will be true		public static function keyvalueDecode(input:String):Object {			var a:Array = input.split("\n");			var out:Object = {};			var tmp:Array;			for(var i in a) {				tmp = a[i].split("=");				if(tmp.length == 1) {					out[tmp[0]] = true;				}				else if (tmp.length == 2) {					out[tmp[0]] = tmp[1];				}			}						return out;		}				// returns a value for a given configuration		public function getConfiguration(configw:String):Object {			if(!this.config) return null;			return this.config[config];		}		//--	Graphics		private function initializeGraphics(e) {			this.controls = new ControlPanel(this.audioPlayer); 			this.controls.y = this.stage.stageHeight-this.controls.height;						stage.addChild(this.controls);						this.tabs = new TabPanel(800, 500);			var w:int = tabs.getPreferredTabWidth();			var h:int = tabs.getPreferredTabHeight();			var tab1:Tab = new Tab("Frequencies", w, h);			tab1.addChild(new SpectogramView(this.audioPlayer, w, h));			this.tabs.addTab(tab1);			var tab2 = new Tab("Balance", w, h);			tab2.addChild(new BalanceView(this.audioPlayer, w, h));			this.tabs.addTab(tab2);			var tab3 = new Tab("Playlist", w, h);			//tab3.graphics.beginFill(0x0000FF);			//tab3.graphics.drawRect(0, 0, 200, 200);			//tab3.addChild(new NowPlayingView(this.audioPlayer, w, h));			tab3.addChild(new PlaylistView(this.audioPlayer, w, h));			this.tabs.addTab(tab3);			stage.addChild(this.tabs);		}//--	Audio		private function initialzeAudio() {			this.audioPlayer = new AudioPlayer(this);			this.dispatchEvent(new Event(AudioPlayerEvents.CREATED));		}		//--	Playlist		private function loadPlaylist() {			var url = this.getConfiguration("playlist");			if(url is String && url != "") {				this.currentPlaylist = new Playlist(url, parseInt(this.getConfiguration("buffertime").toString()));			}						this.currentPlaylist.addEventListener(PlaylistEvents.LOADED, this.playlistLoaded);		}				private function playlistLoaded(e) {			if(this.audioPlayer == null) {				this.initialzeAudio();			}						this.audioPlayer.setPlaylist(e.target);			this.audioPlayer.next();			if(this.config.preload) e.target.preloadAll();			if(this.config.autostart) this.audioPlayer.play();					}	}	}