package {	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;		public class TabPanel extends MovieClip {		private var preferredWidth:int;		private var preferredHeight:int;		private var panelHeight:int = 40;		private var panels:Array;				private var tabs:Array;		private var container:TabPanelContainer;				private var currentlyActive:int;				public function TabPanel(preferredWidth:int, preferredHeight:int) {			this.preferredWidth = preferredWidth;			this.preferredHeight = preferredHeight;						this.container = new TabPanelContainer(preferredWidth, preferredHeight- this.panelHeight);			this.container.y = this.panelHeight;			this.addChild(this.container);						this.tabs = new Array();			this.panels = new Array();			this.currentlyActive = -1;		}				public function addTab(tab:Tab) {			tabs.push(tab);			draw();						if(this.currentlyActive < 0) {				this.currentlyActive = 0;				(this.tabs[0] as Tab).show(this.container);			}		}				private function draw() {			this.clear();						var panelWidth:Number = this.preferredWidth / tabs.length;			var currentText:TextField;									for(var i = 0; i < tabs.length; i++) {				var s = new Sprite();				s.graphics.beginFill(0xFF7400);				s.graphics.drawRect(5, this.panelHeight-2, panelWidth - 10, 2);				s.x = i * panelWidth;								addChild(s);				this.panels.push(s);								currentText = new TextField();				currentText.text = this.tabs[i].getTitle();				currentText.width = panelWidth;				currentText.height = this.panelHeight;								currentText.setTextFormat(new TextFormat("DS-Digital", 20, 0xFFFFFF, null, null, null, null, null, "center"));								currentText.y = (this.panelHeight - currentText.textHeight)/2;								s.addChild(currentText);								s.addEventListener(MouseEvent.CLICK, activateTab);			}		}				private var currentlySwitching:Boolean = false;				private function activateTab(e:MouseEvent) {			if(this.currentlySwitching === true) {				return;			}						this.currentlySwitching = true;						var target:int = Math.floor(this.mouseX/(this.preferredWidth/tabs.length));			if(target == this.currentlyActive) {				this.currentlySwitching = false;				return;			}						var self:TabPanel = this;			(this.tabs[this.currentlyActive] as Tab).addEventListener(ControlEvents.CLOSED, function(e:Event) {				(e.target as Tab).removeEventListener(ControlEvents.CLOSED, arguments.callee);				(self.tabs[self.currentlyActive] as Tab).addEventListener(ControlEvents.OPENED, function(e:Event) {					(e.target as Tab).removeEventListener(ControlEvents.OPENED, arguments.callee);					self.currentlySwitching = false;				});				(self.tabs[self.currentlyActive] as Tab).show(self.container);								self.currentlySwitching = false;			});						(this.tabs[this.currentlyActive] as Tab).hide(this.container);			this.currentlyActive = target;		}				private function clear() {			this.graphics.clear();			for(var i:int = 0; i < this.panels.length; i++) {				this.removeChild(this.panels[i]);			}			this.panels = new Array();		}				public function getPreferredTabWidth():int {			return this.preferredWidth;		}				public function getPreferredTabHeight():int {			return this.preferredHeight - this.panelHeight;		}	}	}