package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.transitions.Tween;	import fl.transitions.easing.Bounce;	import flash.events.TimerEvent;	import flash.utils.Timer;	import fl.transitions.TweenEvent;	import fl.motion.MotionEvent;	import flash.display.DisplayObject;		public class Control extends MovieClip {				private var shown:Boolean = false;		private var audio:AudioPlayer;		private var controlElement:MovieClip;		public function Control(preferredWidth:int, preferredHeight:int, preferredColor:uint, audio:AudioPlayer) {			this.audio = audio;			this.graphics.beginFill(preferredColor);			this.graphics.drawRect(0, 0, preferredWidth, preferredHeight);			this.graphics.endFill();						this.addEventListener(MouseEvent.MOUSE_OVER, this.triggered);		}				public function deactivate():void {			if(this.shown) return;						this.removeEventListener(MouseEvent.MOUSE_OVER, this.triggered);			this.stopClose();		}				public function activate():void {			this.addEventListener(MouseEvent.MOUSE_OVER, this.triggered);		}				private function triggered(e:Event) {			if(this.shown) return;			this.shown = true;			this.dispatchEvent(new Event(Event.ACTIVATE));						this.removeEventListener(MouseEvent.MOUSE_OVER, this.triggered);			this.addEventListener(MouseEvent.MOUSE_OUT, this.startClosing);						this.controlElement = this.getControlElement();			this.addChild(this.controlElement);			new Tween(this.controlElement, "x", Bounce.easeIn, -1000, e.target.x, 0.3, true);			this.controlElement.y = -this.height;		}				private function close():void {			this.shown = false;						new Tween(this.controlElement, "x", Bounce.easeOut, this.controlElement.x, 1000, 0.3, true)				.addEventListener(TweenEvent.MOTION_FINISH, this.closingTweenFinished);		}				private function closingTweenFinished(e:TweenEvent) {			this.removeChild((e.target as Tween).obj as DisplayObject);			this.controlElement = null;			this.dispatchEvent(new Event(Event.DEACTIVATE));		}		//--	Closing		private var isCloseCandidate:Boolean;		private var closeCompletion:Array;		private var minCloseCompletion:uint = 2;				private var closeTimeout:Timer;				private function startClosing(e:Event) {			this.closeTimeout = new Timer(1000);			this.closeTimeout.addEventListener(TimerEvent.TIMER, this.closeCandidate);			this.closeTimeout.start();						e.target.removeEventListener(e.type, arguments.callee);						this.closeCandidate(e);		}				private function closeCandidate(e:Event):void {			trace(e.target);			trace(e);			trace(e.type);			if(!this.isCloseCandidate) {				this.isCloseCandidate = true;				this.closeCompletion = new Array();				this.controlElement.addEventListener(MouseEvent.MOUSE_OVER, this.stopClose);			}						if(e is MouseEvent) {				this.closeCompletion[0] = true;			}						if(e is TimerEvent) {				this.closeCompletion[1] = true;			}						var completion = 0;			for(var i = 0; i < this.closeCompletion.length; i++) {				if(this.closeCompletion[i]) completion++;			}						if(this.minCloseCompletion <= completion) {				this.stopClose();				this.close();			}		}				private function stopClose(e:Event = null) {			if(e != null) {				e.target.removeEventListener(MouseEvent.MOUSE_OVER, arguments.callee);			}						this.isCloseCandidate = false;			if(this.closeTimeout != null) {				this.closeTimeout.stop();				this.closeTimeout.removeEventListener(TimerEvent.TIMER, this.closeCandidate);				this.closeTimeout = null;			}		}				public function getControlElement():MovieClip {			throw new Error("Invalid invocation. Must be overridden");		}				protected final function getAudioPlayer():AudioPlayer {			return this.audio;		}	}	}