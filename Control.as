package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.transitions.Tween;	import fl.transitions.easing.Bounce;	import flash.events.TimerEvent;	import flash.utils.Timer;	import fl.transitions.TweenEvent;	import fl.motion.MotionEvent;	import flash.display.DisplayObject;		public class Control extends MovieClip {				private var shown:Boolean = false;		private var audio:AudioPlayer;		private var controlElement:MovieClip;		protected var opens:Boolean;		public function Control(preferredWidth:int, preferredHeight:int, preferredColor:uint, audio:AudioPlayer) {			this.audio = audio;			this.graphics.beginFill(preferredColor);			this.graphics.drawRect(0, 0, preferredWidth, preferredHeight);			this.graphics.endFill();			this.opens = true;			this.addEventListener(MouseEvent.MOUSE_OVER, this.triggered);		}				public function deactivate():void {			if(this.shown) return;						this.removeEventListener(MouseEvent.MOUSE_OVER, this.triggered);			this.addEventListener(MouseEvent.MOUSE_OVER, this.requestControl);		}				public function activate():void {			this.addEventListener(MouseEvent.MOUSE_OVER, this.triggered);			this.removeEventListener(MouseEvent.MOUSE_OVER, this.requestControl);		}				private function requestControl(e:MouseEvent) {			(this.parent as ControlPanel).requestControl(this);		}				public function triggered(e:Event) {			if(this.opens === true) {				this.shown = true;								(this.parent as ControlPanel).setActive(this);				this.removeEventListener(MouseEvent.MOUSE_OVER, this.triggered);								this.dispatchEvent(new Event(ControlEvents.OPENED));				this.addEventListener(MouseEvent.MOUSE_OUT, this.startClosing);								this.controlElement = this.getControlElement();				this.addChild(this.controlElement);				new Tween(this.controlElement, "x", Bounce.easeIn, -1000, 0, 0.3, true);				this.controlElement.y = -this.height;			}		}				public function close():void {			this.shown = false;						new Tween(this.controlElement, "x", Bounce.easeOut, this.controlElement.x, 1000, 0.3, true)				.addEventListener(TweenEvent.MOTION_FINISH, this.closingTweenFinished);		}				private function closingTweenFinished(e:TweenEvent) {			if(((e.target as Tween).obj as DisplayObject).parent != null) this.removeChild((e.target as Tween).obj as DisplayObject);			this.controlElement = null;			this.dispatchEvent(new Event(ControlEvents.CLOSED));		}		//--	Closing		private var isCloseCandidate:Boolean;		private var closeCompletion:Array;		protected var minCloseCompletion:uint = 2;				private var closeTimeout:Timer;				private function startClosing(e:Event) {			this.isCloseCandidate = true;			this.closeCompletion = new Array();			this.closeTimeout = new Timer(200, 1);			this.closeTimeout.addEventListener(TimerEvent.TIMER_COMPLETE, this.closeCandidate);			this.closeTimeout.start();						this.removeEventListener(MouseEvent.MOUSE_OUT, arguments.callee);									var self:Control = this;			this.controlElement.addEventListener(MouseEvent.ROLL_OVER, function(e:Event) {				if(self.shown) self.stopClose();				self.controlElement.removeEventListener(MouseEvent.ROLL_OVER, arguments.callee);				e.stopPropagation();			});			this.controlElement.addEventListener(MouseEvent.ROLL_OUT, function(e:Event) {				self.startClosing(e);				self.controlElement.removeEventListener(MouseEvent.ROLL_OUT, arguments.callee);				e.stopPropagation();			});									closeCandidate(e);		}				private function closeCandidate(e:Event):void {			if(e is MouseEvent) {				this.closeCompletion[0] = true;			}						if(e is TimerEvent) {				this.closeCompletion[1] = true;			}						var completion = 0;			for(var i = 0; i < this.closeCompletion.length; i++) {				if(this.closeCompletion[i]) completion++;			}						if(this.minCloseCompletion <= completion) {				this.stopClose();				this.close();			}		}				private function stopClose(e:Event = null) {			this.isCloseCandidate = false;			this.closeTimeout.stop();			this.closeTimeout.removeEventListener(TimerEvent.TIMER_COMPLETE, this.closeCandidate);		}				public function getControlElement():MovieClip {			throw new Error("Invalid invocation. Must be overridden");		}				protected final function getAudioPlayer():AudioPlayer {			return this.audio;		}	}	}