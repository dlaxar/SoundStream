package  {	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	import flash.media.ID3Info;	import flash.utils.ByteArray;	import flash.display.Loader;	import com.fusiox.media.ID3Reader;		public class Playlist extends EventDispatcher {		private var url:String = null;		private var buffertime:int;		private var requests:Array = new Array();		//-- preloading		private var startetLoading:Boolean = false;				public function Playlist(url:String = null, buffertime:int = 2000) {			this.buffertime = buffertime;			if(url != null) {				this.url = url;				this.load(this.url);			}		}				public function load(url) {			var req:URLLoader = new URLLoader(new URLRequest(url));			req.addEventListener(Event.COMPLETE, this.playlistLoaded);		}				private function playlistLoaded(e) {			var list:Array = e.target.data.split("\n");						this.requests = new Array();						for(var index in list) {				this.requests[index] = new Object();				this.requests[index].startedLoading = false;				this.requests[index].request = new Sound();				this.requests[index].url = new URLRequest(list[index]);				this.requests[index].id3ready = false;				(function(j, self) {					(self.requests[j].request as Sound).addEventListener(Event.ID3, function() {						self.requests[j].id3ready = true;						self.dispatchEvent(new Event(PlaylistEvents.NEW_ID3_DATA));					});				 })(index, this);			}						this.dispatchEvent(new Event(PlaylistEvents.LOADED));		}				public function preloadAll():void {			if(this.startetLoading === true) return;						this.startetLoading = true;						this.preload(null);		}				private function preload(e:Event) {			for(var index in this.requests) {				if(this.requests[index].startedLoading) continue;				else {					this.requests[index].startedLoading = true;					var context = new SoundLoaderContext(this.buffertime, true);					this.requests[index].request.load(this.requests[index].url as URLRequest, context);					this.requests[index].request.addEventListener(Event.COMPLETE, this.preload);					return;				}			}		}				public function getTrack(i:uint):Sound {			if(i < this.requests.length) {				if(this.requests[i].startedLoading === false)					this.requests[i].request.load(this.requests[i].url);								return this.requests[i].request;			}			else return null; 		}				public function getLength():uint {			return this.requests.length;		}				public function isID3Ready(index:uint):Boolean {			return this.requests[index].id3ready;		}				public function getID3Formated(index:uint):String {			if(!this.isID3Ready(index)) return null;			var s:String = "";			var id3:ID3Info = this.requests[index].request.id3;			s += "Artist: " + unless(id3.artist) + "\n";			return s;		}				public function getID3Line(index:uint):String {			if(!this.isID3Ready(index)) return "Keine Daten";			var id3:ID3Info = this.requests[index].request.id3;						return unless(id3.artist) +  " - " + unless(id3.songName);		}				private var length:int = 0;		private var _bytes:ByteArray;		public function computeImage(i:uint):void {			var _bytes = new ByteArray();			this.requests[i].request.extract(_bytes, /*(this.requests[i].request as Sound).bytesTotal*/1000);			_bytes.position = 0;						trace(_bytes);						while(length == 0) {				trace("byte");				trace(_bytes.readUTFBytes(3).toUpperCase() == "ID3");				trace(_bytes.readUTFBytes(3).toUpperCase());				trace(_bytes.readUTFBytes(3).toUpperCase());				trace(_bytes.readUTFBytes(3).toUpperCase());				trace(_bytes.readUTFBytes(3).toUpperCase());				trace(".byte");				return;                /*if (_bytes.readUTFBytes(3).toUpperCase()=="ID3") {					trace("found");                    _bytes.readByte();                    _bytes.readByte(); // storing tag version                    _bytes.readByte(); // storing flags byte                    length = _bytes.readInt();                } else { trace("error"); }*/			}			trace("found id3, length: " + length);			//var id3:ID3Reader = new ID3Reader();			//trace(id3.version);		}				public function get trackCount() {			return this.requests.length;		}				private function unless(o:Object, otherwise:Object = "") {			if(o == null || (typeof o == typeof "" && o == "")) return otherwise;			return o;		}	}	}