package  {	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.media.Sound;	import flash.media.SoundLoaderContext;		public class Playlist extends EventDispatcher {		private var url:String = null;		private var buffertime:int;		private var requests:Array = new Array();		//-- preloading		private var startetLoading:Boolean = false;				public function Playlist(url:String = null, buffertime:int = 2000) {			this.buffertime = buffertime;			if(url != null) {				this.url = url;				this.load(this.url);			}		}				public function load(url) {			var req:URLLoader = new URLLoader(new URLRequest(url));			req.addEventListener(Event.COMPLETE, this.playlistLoaded);		}				private function playlistLoaded(e) {			var list:Array = e.target.data.split("\n");						this.requests = new Array();						for(var index in list) {				this.requests[index] = new Object();				this.requests[index].startedLoading = false;				this.requests[index].request = new Sound();				this.requests[index].url = new URLRequest(list[index]);			}						this.dispatchEvent(new Event(PlaylistEvents.LOADED));		}				public function preloadAll():void {			if(this.startetLoading === true) return;						this.startetLoading = true;						this.preload(null);		}				private function preload(e:Event) {			for(var index in this.requests) {				if(this.requests[index].startedLoading) continue;				else {					this.requests[index].startedLoading = true;					var context = new SoundLoaderContext(this.buffertime, true);					trace("load");					this.requests[index].request.load(this.requests[index].url as URLRequest, context);					this.requests[index].request.addEventListener(Event.COMPLETE, this.preload);					return;				}			}		}				public function getTrack(i:uint):Sound {			if(i < this.requests.length-1) {				if(this.requests[i].startedLoading === false)					this.requests[i].request.load(this.requests[i].url);								return this.requests[i].request;			}			else return null; 		}				public function getLength():uint {			return this.requests.length;		}	}	}